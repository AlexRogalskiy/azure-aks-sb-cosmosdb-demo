================ AKS ======================

Register Azure Account Features
-------------------------------
az provider register -n Microsoft.ContainerService
az provider register -n Microsoft.Network
az provider register -n Microsoft.Compute

Create/Delete Kubernetes RG and Cluster
---------------------------------------
az login --username <username> --password <password>

az group create `
  --resource-group RG-EastUS-AKS-VoterDemo `
  --location eastus

az aks create `
  --name AKS-Cluster-VoterDemo `
  --resource-group RG-EastUS-AKS-VoterDemo `
  --node-count 1 `
  --generate-ssh-keys `
  --kubernetes-version 1.8.2

az aks get-credentials `
  --name AKS-Cluster-VoterDemo `
  --resource-group RG-EastUS-AKS-VoterDemo

az aks delete `
  --name AKS-Cluster-VoterDemo `
  --resource-group RG-EastUS-AKS-VoterDemo

Install kubectl
---------------
az acs kubernetes install-cli  `
  --install-location C:\Users\gary.stafford\kubectl.exe

az acs kubernetes install-cli

Add to %PATH% Environment Variables

Kubernetes Dashboard
--------------------
az aks browse `
  --name AKS-Cluster-VoterDemo `
  --resource-group RG-EastUS-AKS-VoterDemo

Upgrade Kubernetes (didn't work!)
---------------------------------
az aks get-versions `
  --name AKS-Cluster-VoterDemo `
  --resource-group RG-EastUS-AKS-VoterDemo

az aks upgrade `
  --name AKS-Cluster-VoterDemo `
  --resource-group RG-EastUS-AKS-VoterDemo `
  --kubernetes-version 1.8.2

Re-build Images
---------------
docker login

./gradlew build -x test
docker build -t garystafford/voter-service:0.2.105 .
docker push garystafford/voter-service:0.2.105

./gradlew build -x test
docker build -t garystafford/candidate-service:0.2.28 .
docker push garystafford/candidate-service:0.2.28

grunt build
docker build -t garystafford/voter-client:0.2.44 .
docker push garystafford/voter-client:0.2.44

docker build -t garystafford/voter-api-gateway:0.2.24 .
docker push garystafford/voter-api-gateway:0.2.24


Test Locally with Docker Compose vs. Kubernetes
-----------------------------------------------
docker-compose up -d
docker ps

Covert Docker Compose File with kompose
---------------------------------------
kompose convert -f docker-compose.yml

Create Kubenetes Resources
--------------------------
kubectl create -f .\voter-deployment.yaml
kubectl create -f .\voter-service.yaml
kubectl get services
kubectl describe service voter

Populate Candidate and Voter data
-----------------------------------
http://api.voter-demo.com/candidate/simulation
http://api.voter-demo.com/voter/simulation

Other Commands
--------------
# Shell into Pod container
kubectl get pods
kubectl exec -it voter-6dd484fc87-nvv6d -- /bin/sh

# replace Service
kubectl replace --force -f .\voter-deployment.yaml

# delete pod (it will be replaced)
kubectl delete pod gateway-7889d8bd4f-x6c74

# view logs
kubectl get pods
kubectl logs voter-64c8b64dfc-2dznc

kubectl get nodes
kubectl config view
kubectl cluster-info
az aks get-versions `
  --name AKS-Cluster-VoterDemo `
  --resource-group RG-EastUS-AKS-VoterDemo

Software
--------
Azure AKS Preview
Kubernetes v1.8.2
Docker CE for Windows v17.11.0
Azure CLI v2.0.21
kubectl v1.8.3 (client)
Kompose v1.4.0
PowerShell 5.1 (instead of Windows Command Prompt)
Windows 10 Enterprise 64-bit laptop

References
----------
https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough
https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-intro/
https://docs.microsoft.com/en-us/azure/aks/tutorial-kubernetes-deploy-application
https://kubernetes.io/docs/user-guide/kubectl-cheatsheet/


Secrets
=======
echo -n "mongodb://voterapp:<password>==@<subdomain>.documents.azure.com:10255/votes?ssl=true&replicaSet=globaldb" | base64
echo "<encoded string>" | base64 --decode

kubectl create -f .\azure-cosmosdb-candidate-secret.yaml
kubectl get secret

New Notes
=========
Login-AzureRmAccount
Get-AzureRMLocation

kubectl replace --force -f .\voter-deployment.yaml

sh ./sample_data_elections.sh
sh ./sample_data_candidates.sh

CosmosDB
========
https://docs.microsoft.com/en-us/azure/cosmos-db/create-mongodb-java
az cosmosdb create `
	--name voterapp `
	--resource-group RG-EastUS-AKS-VoterDemo `
	--location "East US=0" `
	--kind MongoDB `
	--debug

# Above command will automatically try to register resource provider below
az provider register -n Microsoft.DocumentDB
az provider show -n Microsoft.DocumentDB

az aks scale `
  --name AKS-Cluster-VoterDemo `
  --resource-group RG-EastUS-AKS-VoterDemo `
  --node-count 3

https://crondev.com/kubernetes-nginx-ingress-controller/
https://github.com/kubernetes/ingress-nginx/tree/master/deploy
kubectl describe ingress
kubectl replace -f <file_yaml>
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "//CN=api.voter-demo.com"
kubectl create secret tls api-secret --key tls.key --cert tls.crt
kubectl exec -it <pod> -- sh

THIS WORKED
===========
https://gist.github.com/lmmendes/7fad9a2c8f389b39b6661d0945b72cb7
certbot certonly --standalone --preferred-challenges http --http-01-port 63443 -d api.voter-demo.com
certbot certonly --standalone --preferred-challenges http --http-01-port 63443 -d www.voter-demo.com,voter-demo.com
Restart HAProxy
---------------
haproxy -D -f /usr/local/etc/haproxy/haproxy.cfg -p /var/run/haproxy.pid -sf $(cat /var/run/haproxy.pid)

Combine private keys with PEM (letsencrypt/HAProxy Issue)
---------------------------------------------------------
https://stackoverflow.com/a/34336069/580268

kubectl cp gateway-7757cbcfd8-b65vx:/etc/letsencrypt/ .

Create secret for nginx ingress controller secret
-------------------------------------------------
kubectl create secret tls api-voter-demo-secret --key .\privkey1.pem --cert .\fullchain1.pem

nginx-ingress
-------------
kubectl create -f .\namespace.yaml
kubectl create secret tls api-voter-demo-secret ^
	--key ..\letsencrypt\archive\api.voter-demo.com\privkey1.pem ^
	--cert ..\letsencrypt\archive\api.voter-demo.com\fullchain1.pem ^
	--namespace=voter-api

kubectl create -f .\tcp-services-configmap.yaml
kubectl create -f .\udp-services-configmap.yaml
kubectl create -f .\configmap.yaml
kubectl create -f .\default-backend.yaml # also contains servce
kubectl create -f .\nginx-ingress-controller.yaml
kubectl create -f .\nginx-ingress-controller-service.yaml
kubectl get all --namespace=ingress-nginx
kubectl create -f .\ingress

voter-app
---------
kubectl create -f .\namespace.yaml
kubectl create -f .\client-deployment.yaml
kubectl create -f .\client-sevice.yaml
